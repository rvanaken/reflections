How did viewing a diff between two versions of a file help you see the bug that
was introduced?

FC allowed a more systematic comparison that was much faster than visual
comparison.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

Similar to the efficiency of systematic file comparison, having access  to all
older versions of a given source file will allow detailed comparison between
Versions to see exactly what changed.  It's possible that a revision breaks
something.  Having the hostory woull allow you to see the specific differences
and potentially revert to the older version... take another swing at the
change.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

Pro: Allows you to decide when a logical change is made.
Con: You could accidentally lose changes by forgetting to commit.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

Verion control needs to keep the individual files compatible. To acomplish this
a commit has to be able to include multiple files. Google Docs is not
guaranteeing that sets of files are of the exact same version.

How can you use the commands git log and git diff to view the history of files?

"git log" provides the ID used to address different commits. "git log" can be
used to compare the chanes between to commits.

How might using version control make you more confident to make changes that
could break something?

Knowing that you can always get back to where you were helps you move forward
with confidence.

Now that you have your workspace set up, what do you want to try using Git for?

When working on a project, it would be good to use Git for source control.

